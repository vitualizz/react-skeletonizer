{"version":3,"sources":["../src/components/SkeletonParagraph.tsx","../src/components/SkeletonHeading.tsx","../src/components/SkeletonButton.tsx","../src/components/SkeletonText.tsx","../src/components/SkeletonImage.tsx","../src/hooks/useSkeletonTree.ts","../src/components/Skeletonizer.tsx"],"sourcesContent":["const SkeletonParagraph: React.FC<{ lines?: number; className?: string }> = ({ \n  lines = 1, \n  className = '' \n}) => (\n  <div className={`space-y-2 ${className}`}>\n    {Array.from({ length: lines }, (_, i) => (\n      <div \n        key={i}\n        className={`h-4 bg-gray-300 rounded animate-pulse ${\n          i === lines - 1 ? 'w-3/4' : 'w-full'\n        }`} \n      />\n    ))}\n  </div>\n);\n\nexport default SkeletonParagraph;\n","import { FC } from 'react';\n\nconst SkeletonHeading: FC<{ level?: number; className?: string }> = ({ \n  level = 1, \n  className = '' \n}) => {\n  const heightClass = level <= 2 ? 'h-8' : level <= 4 ? 'h-6' : 'h-5';\n  const widthClass = level <= 2 ? 'w-3/4' : 'w-2/3';\n  \n  return (\n    <div className={`${heightClass} ${widthClass} bg-gray-300 rounded animate-pulse ${className}`} />\n  );\n};\n\nexport default SkeletonHeading;\n","import { FC } from 'react';\n\nconst SkeletonButton: FC<{ className?: string }> = ({ className = '' }) => (\n  <div className={`h-10 w-24 bg-gray-300 rounded-lg animate-pulse ${className}`} />\n);\n\nexport default SkeletonButton;\n","import { FC } from 'react';\n\nconst SkeletonText: FC<{ className?: string }> = ({ className = '' }) => (\n  <div className={`h-4 bg-gray-300 rounded animate-pulse ${className}`} />\n);\n\nexport default SkeletonText;\n","import { FC } from 'react';\n\nconst SkeletonImage: FC<{ width?: number; height?: number; className?: string }> = ({ \n  width, \n  height = 200, \n  className = '' \n}) => (\n  <div \n    className={`bg-gray-300 rounded animate-pulse flex items-center justify-center ${className}`}\n    style={{ width: width || '100%', height }}\n  >\n    <svg \n      className=\"w-12 h-12 text-gray-400\" \n      fill=\"currentColor\" \n      viewBox=\"0 0 20 20\"\n    >\n      <path fillRule=\"evenodd\" d=\"M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z\" clipRule=\"evenodd\" />\n    </svg>\n  </div>\n);\n\nexport default SkeletonImage;\n","import { ReactNode, isValidElement, ReactElement, Children } from 'react';\n\nexport type NodeType = 'text' | 'image' | 'heading' | 'paragraph' | 'button' | 'container' | 'unknown';\n\nexport interface SkeletonNode {\n  type: NodeType;\n  depth: number;\n  hasChildren: boolean;\n  originalProps?: Record<string, any>;\n  children?: SkeletonNode[];\n}\n\nexport interface SkeletonTreeMetadata {\n  nodes: SkeletonNode[];\n  totalDepth: number;\n  nodeCount: number;\n}\n\nexport const useSkeletonTree = (children: ReactNode): SkeletonTreeMetadata => {\n  const analyzeNode = (node: ReactNode, depth: number = 0): SkeletonNode[] => {\n    if (!node) return [];\n\n    if (Array.isArray(node)) {\n      return node.flatMap(child => analyzeNode(child, depth));\n    }\n\n    if (typeof node === 'string' || typeof node === 'number') {\n      return [{\n        type: 'text',\n        depth,\n        hasChildren: false\n      }];\n    }\n\n    if (isValidElement(node)) {\n      const element = node as ReactElement;\n      const tagName = typeof element.type === 'string' ? element.type.toLowerCase() : 'unknown';\n      \n      const nodeType = getNodeType(tagName);\n      const childNodes = element.props.children;\n      const hasChildren = childNodes != null && \n        (Array.isArray(childNodes) ? childNodes.length > 0 : true);\n\n      const analyzedChildren = hasChildren \n        ? Children.toArray(childNodes).flatMap(child => analyzeNode(child, depth + 1))\n        : [];\n\n      return [{\n        type: nodeType,\n        depth,\n        hasChildren,\n        originalProps: element.props,\n        children: analyzedChildren\n      }];\n    }\n\n    return [];\n  };\n\n  const getNodeType = (tagName: string): NodeType => {\n    if (['h1', 'h2', 'h3', 'h4', 'h5', 'h6'].includes(tagName)) return 'heading';\n    if (tagName === 'img') return 'image';\n    if (['p', 'span'].includes(tagName)) return 'paragraph';\n    if (tagName === 'button') return 'button';\n    if (['div', 'section', 'article', 'main', 'aside', 'header', 'footer'].includes(tagName)) return 'container';\n    return 'unknown';\n  };\n\n  const nodes = analyzeNode(children);\n  const maxDepth = nodes.reduce((max, node) => {\n    const nodeMaxDepth = getMaxDepth(node);\n    return Math.max(max, nodeMaxDepth);\n  }, 0);\n\n  const nodeCount = countNodes(nodes);\n\n  return {\n    nodes,\n    totalDepth: maxDepth,\n    nodeCount\n  };\n};\n\nconst getMaxDepth = (node: SkeletonNode): number => {\n  if (!node.children || node.children.length === 0) {\n    return node.depth;\n  }\n  return Math.max(node.depth, ...node.children.map(getMaxDepth));\n};\n\nconst countNodes = (nodes: SkeletonNode[]): number => {\n  return nodes.reduce((count, node) => {\n    return count + 1 + (node.children ? countNodes(node.children) : 0);\n  }, 0);\n};\n\n","import { FC, ReactNode } from 'react';\nimport SkeletonParagraph from './SkeletonParagraph';\nimport SkeletonHeading from './SkeletonHeading';\nimport SkeletonButton from './SkeletonButton';\nimport SkeletonText from './SkeletonText';\nimport SkeletonImage from './SkeletonImage';\nimport { useSkeletonTree, SkeletonNode } from '../hooks/useSkeletonTree';\n\nexport interface SkeletonizerProps {\n  loading: boolean;\n  children: ReactNode;\n  className?: string;\n}\n\nexport const Skeletonizer: FC<SkeletonizerProps> = ({ \n  loading, \n  children, \n  className = '' \n}) => {\n  const { nodes } = useSkeletonTree(children);\n\n  if (!loading) {\n    return <>{children}</>;\n  }\n\n  const renderSkeletonNode = (node: SkeletonNode, index: number): ReactNode => {\n    const key = `skeleton-${node.depth}-${index}`;\n    \n    switch (node.type) {\n      case 'text':\n        return <SkeletonText key={key} className=\"mb-1\" />;\n        \n      case 'image':\n        return (\n          <SkeletonImage \n            key={key}\n            width={node.originalProps?.width}\n            height={node.originalProps?.height || 200}\n            className=\"mb-2\"\n          />\n        );\n        \n      case 'heading':\n        const headingLevel = node.originalProps?.children ? \n          (typeof node.originalProps.children === 'string' ? 1 : 1) : 1;\n        return <SkeletonHeading key={key} level={headingLevel} className=\"mb-3\" />;\n        \n      case 'paragraph':\n        const lines = node.hasChildren ? 2 : 1;\n        return <SkeletonParagraph key={key} lines={lines} className=\"mb-2\" />;\n        \n      case 'button':\n        return <SkeletonButton key={key} className=\"mb-2\" />;\n        \n      case 'container':\n        return (\n          <div key={key} className=\"mb-2\">\n            {node.children?.map((child, childIndex) => \n              renderSkeletonNode(child, childIndex)\n            )}\n          </div>\n        );\n        \n      default:\n        return node.hasChildren ? (\n          <div key={key} className=\"mb-1\">\n            {node.children?.map((child, childIndex) => \n              renderSkeletonNode(child, childIndex)\n            )}\n          </div>\n        ) : (\n          <SkeletonText key={key} className=\"mb-1\" />\n        );\n    }\n  };\n\n  return (\n    <div className={`animate-pulse ${className}`}>\n      {nodes.map((node, index) => renderSkeletonNode(node, index))}\n    </div>\n  );\n};\n"],"mappings":"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","names":["jsx","jsx","jsx","jsx","jsx"]}